//===================================================================================================
Copying the elements: O(n + m)
Sorting the merge array: O((n + m) * log(n + m))
Determining the median: O(1) (constant time)

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int m = nums2.length;
        
        int merge[]=new int[n+m];
        System.arraycopy(nums1, 0, merge, 0,  n);
        System.arraycopy(nums2,0,merge,n, m);
        Arrays.sort(merge);

        int len=merge.length;
        if(len%2==0)
        {
            int mid1=merge[len/2];
            int mid2=merge[len/2 -1];
            return  (mid1+mid2)/2.0;
        }
        else
        {
            int mid=merge[len/2];
            return mid;
        }
    }
}

//===================================== Statement =======================================================
Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.

The overall run time complexity should be O(log (m+n)).

 

Example 1:

Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.
Example 2:

Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.
 

Constraints:

nums1.length == m
nums2.length == n
0 <= m <= 1000
0 <= n <= 1000
1 <= m + n <= 2000
-106 <= nums1[i], nums2[i] <= 106
