//======================================Solution Using hashset Two pointer approach ==============Time & Space complexity O(n)
import java.util.*;
class HelloWorld {
    public static int longestSubstring(String s) {
        int left = 0;
        int right = 0;
        int result = 0;
        Set<Character> set = new HashSet<>();
        while(right < s.length()) {
            char ch = s.charAt(right);
            if(!set.contains(ch)){
                set.add(ch);
                result = Math.max(result, set.size());
                right++;
            }else{
                set.remove(s.charAt(left));
                left++;
            }
        }
        return result;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        String str = sc.next();
        System.out.print(longestSubstring(str));
    }
}
//================================================ Using hashMap ================================================
class Solution {
    public int lengthOfLongestSubstring(String s) {
         HashMap<Character, Integer> hm = new HashMap<>();
        int count = 0;
        int longest = 0;
        int startIndex = 0; // Keeps track of the start index of the current substring
        
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            
            if (hm.containsKey(ch) && hm.get(ch) >= startIndex) {
                startIndex = hm.get(ch) + 1;
                count = i - startIndex + 1;
            } else {
                count++;
            }
            
            hm.put(ch, i);
            
            if (longest < count) {
                longest = count;
            }
        }
        
        return longest;
    }
}
//======================================= Problem Statements ============================================================
Given a string s, find the length of the longest 
substring
 without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and space
